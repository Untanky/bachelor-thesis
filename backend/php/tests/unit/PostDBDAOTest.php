<?php

use Doctrine\ORM\Tools\Setup;
use Doctrine\ORM\EntityManager;

class PostDBDAOTest extends \Codeception\Test\Unit
{

    private $dao;

    private $post1, $post2, $post3, $post4;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub


        $isDevMode = true;
        $config = Setup::createAnnotationMetadataConfiguration(array(__DIR__."/src"), $isDevMode, null, null, false);

        $conn = array(
            'driver'   => 'pdo_sqlite',
            'database' => ':memory:',
            'prefix'   => '',
        );

        $entityManager = EntityManager::create($conn, $config);

        $this->createDatabaseSchema($entityManager);

        $entityManager->beginTransaction();
        $this->post1 = $this->persistPost("First post", "This is my first post in this blog", $entityManager);
        $this->post2 = $this->persistPost("Post #2", "My second post ever. My momma says she is so proud", $entityManager);
        $this->post3 = $this->persistPost("My last post", "I have to quit posting, so this my last post", $entityManager);
        $entityManager->commit();

        $this->post4 = new Post();
        $this->post4->setTitle("I'm back and posting again");
        $this->post4->setDescription("I have decided that I need to continue posting.");

        $this->dao = new PostDBDAO($entityManager);
    }

    public function testDelete()
    {

    }

    public function testUpdate()
    {

    }

    public function testCreate()
    {

    }

    public function testFindAll()
    {
        $postList = $this->dao->findAll();

        $this->assertCount(3, $postList);
        $this->assertContains($this->post1, $postList);
        $this->assertContains($this->post2, $postList);
        $this->assertContains($this->post3, $postList);
    }

    protected function createDatabaseSchema(EntityManager $entityManager)
    {
        $metadata = $entityManager->getClassMetadata(Post::class);
        $schemaTool = new \Doctrine\ORM\Tools\SchemaTool($entityManager);
        // you can drop the table like this if necessary
        $schemaTool->dropSchema(array($metadata));
        $schemaTool->createSchema(array($metadata));
    }

    protected function persistPost(string $title, string $description, EntityManager $entityManager)
    {
        $post1 = new Post();
        $post1->setTitle($title);
        $post1->setDescription($description);
        $entityManager->persist($post1);
        $entityManager->flush();
        return $post1;
    }
}
