swagger: "2.0"
info:
  description: ""
  version: "1.1.0"
  title: "Blogging prototype"
  contact:
    email: "s0563265@htw-berlin.de"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost:8080"
basePath: "/api/blog"
tags:
  - name: "blog"
    description: "Access, create and modify blog posts."
schemes:
  - "http"
paths:
  /post:
    get:
      tags:
      - "blog"
      summary: "Retrieve all the posts"
      description: "Retrieves all the posts stored in the system and returns them in JSON format."
      produces:
      - application/json
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              type: object
              allOf: 
              - type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 918273645
                  url:
                    type: string
                    example: "/post/918273645"
              - $ref: "#/definitions/Post"
    post:
      tags:
      - "blog"
      summary: "Create a new recipe"
      description: "Store a new recipe in the system. The recipe data must not contain an id as this is generated by the system. The body must be in JSON format."
      consumes:
      - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Post object to upload"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "request data not correct"
          schema:
            $ref: "#/definitions/Error"
  /post/{postId}:
    put:
      tags:
      - "blog"
      summary: "Update a recipe"
      description: "Update a recipe from the request body. The request body must be in JSON format and must contain an id matching the id in the request path."
      consumes:
      - application/json
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of post to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Post object to upload"
        required: true
        schema:
          type: object
          allOf: 
          - type: object
            properties:
              id:
                type: integer
                format: int64
                example: 918273645
          - $ref: "#/definitions/Post"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "request data not correct"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "post not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "blog"
      summary: "Delete a post"
      description: "Deletes a post from the system."
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of post to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "request data not correct"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "post not found"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Post:
    type: object
    properties:
      title:
        type: string
        example: "Test Title"
      description:
        type: string
        example: "Test Description; might be a really long text"
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 404
      message: 
        type: string
        example: "not found"
